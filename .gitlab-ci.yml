image: node:10

############################
# CI Stages
stages:
  # - test
  - build
  - deploy
  - notify

############################
# Variables & CI config
variables:
  ENV_NAME: "${CI_COMMIT_REF_NAME}_env"
cache:
  key: "$CI_JOB_NAME-$CI_COMMIT_REF_SLUG"

############################
# Begin stages

## (!) TODO: Teslint: Code linter
# testlint:
#   stage: test
#   image: node:10
#   script:
#     - npm install
#     - npm run lint

## Build: Create application bundle
build@all:
  stage: build
  artifacts:
    paths:
    - dist/
    - .env.yml
    expire_in: 1 days
  script:
    - printf "${!ENV_NAME}" >> $CI_PROJECT_DIR/.env.yml
    - npm install
    - npm run postinstall
    - npm run build
  only:
    - development
    - staging
    - master
    - /^client_.*$/i

## Deploy: Creates a new deployment with Firebase
deploy@all:
  stage: deploy
  script:
    - npm install -g firebase-tools
    - >
        firebase deploy
        --non-interactive
        --project $PROJECT_ID
        --token $FIREBASE_DEPLOY_TOKEN
        --only hosting:$CI_COMMIT_REF_NAME
        -m "Pipeline $CI_PIPELINE_ID, build $CI_BUILD_ID"
  needs:
    - job: build@all
      artifacts: true
  only:
    - development
    - staging
    - master
    - /^client_.*$/i

# Notify: Creates a notification using a custom hook
notify@all:
  stage: notify
  image: gliderlabs/alpine
  script:
    - apk add -q --no-cache httpie
    - >
        http --ignore-stdin
        -f POST $TELEGRAM_UPDATE_URL
        APPLICATION="Cero Papel Frontend"
        BRANCH="${CI_COMMIT_REF_NAME}"
        VERSION="CI-${CI_PIPELINE_ID}"
        MESSAGE="${CI_COMMIT_MESSAGE}"
  when: on_success
  only:
    - development
    - staging
    - master
    - /^client_.*$/i
